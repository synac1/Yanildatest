package pp264;

public class pp264 {

//Fig 7.14 GradeBook.java
// GradeBook class using an array to store test grades

public class GradeBook {
	
	private String courseName;// name of course
	private int[] grades;// array of student grades
	
	//two-argument constructor initialize courseName and grades array
	public GradeBook(String name, int[] gradesArray)
	{
		courseName= name;//initialize
		grades= gradesArray;//store grades
	}//end two-arguments GradeBook constructor
	
	// method to set the course name
	public void setCourseName( String name )
	{
		courseName = name; // store the course name
	}

	// method to retrieve the course name
	public String getCourseName()
	{
		return courseName;
	}
	// display a welcome message to the GradeBook user
	public void displayMessage()
	{
		System.out.printf( "Welcome to the grade book for\n%s!\n\n",
				getCourseName() );
	}
	// perform various operations on the data
	public void processGrades()
	{
		// output grades array
		outputGrades();
		System.out.printf( "\nClass average is %.2f\n", getAverage() );
		
		
		System.out.printf( "Lowest grade is %d\nHighest grade is %d\n\n",
				getMinimum(), getMaximum());
		
		
		outputBarChart();
		
	}
	public int getMinimum()
	{
		int lowGrade = grades[ 0 ]; // assume grades[ 0 ] is smallest
		// loop through grades array
		for ( int grade : grades )
		{
		// if grade lower than lowGrade, assign it to lowGrade
		if ( grade < lowGrade )
		lowGrade = grade; // new lowest grade
		} // end for
		return lowGrade; // return lowest grade
	}
	public int getMaximum()
	{
		int highGrade = grades[ 0 ]; // assume grades[ 0 ] is smallest
		// loop through grades array
		for ( int grade : grades )
		{
		// if grade lower than lowGrade, assign it to lowGrade
		if ( grade > highGrade )
		highGrade = grade; // new lowest grade
		} // end for
		return highGrade; // return highest grade
	}
	
	public double getAverage()
	{
		int total = 0; // initialize total
		// sum grades for one student
		for ( int grade : grades )
		total += grade;
		
		return (double)total/grades.length;
	}
	
	public void outputBarChart()
	{
		System.out.println( "Grade distribution:" );
		int[] frequency = new int[ 11 ];
		
		// for each grade, increment the appropriate frequency
		for ( int grade : grades )
		++frequency[ grade / 10 ];
		
		// for each grade frequency, print bar in chart
		for ( int count = 0; count < frequency.length; count++ )
		{
			if ( count == 10 )
				System.out.printf( "%5d: ", 100 );
			else
				System.out.printf( "%02d-%02d: ",
						count * 10, count * 10 + 9 );
			for ( int stars = 0; stars < frequency[ count ]; stars++ )
				System.out.print( "*" );
			System.out.println();
				
		}
		
		
	}
	public void outputGrades()
	{
		System.out.println( "The grades are:\n" );

		// output each student's grade
		for ( int student = 0; student < grades.length; student++ )
		System.out.printf( "Student %2d: %3d\n",
		student + 1, grades[ student ] );
		
	}
	
	
}


